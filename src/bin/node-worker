#!/usr/bin/env node

"use strict";
GLOBAL.workers=[];
if(process.argv.length > 3) {
	var path = require('path');
	var fs= require('fs');
	var lib = path.join(path.dirname(fs.realpathSync(__filename)), '../lib');
	var NodeWorker=require(lib+'/node-worker.js').NodeWorker;
	var PID_PATH='./.node-queue-pids';
    var JOB_TIMEOUT=60000;
	var workers=0;
	var queue="";
	var db_config_option='';
	console.log(process.argv);
	var action=process.argv[2];

	for(var i=0;i<process.argv.length;i++){
		var param=process.argv[i];
		if(param.indexOf('QUEUE=')==0){
			queue=param.replace("QUEUE=","");
		}else if(param.indexOf('WORKERS=')==0){
			workers=parseInt(param.replace('WORKERS=',''));
		}else if(param.indexOf('DB_CONFIG=')==0){
			db_config_option=param.replace("DB_CONFIG=","");
		}else if (param.indexOf('PID=')==0){
			PID_PATH=param.replace("PID=","");
		}else if (param.indexOf('JOB_TIMEOUT=')==0){
		    JOB_TIMEOUT=parseInt(param.replace("JOB_TIMEOUT=","").trim());
		    if(isNaN(JOB_TIMEOUT)){
		        console.log("ERROR: Invalid Parameter JOB_TIMEOUT, it should be number only");
		        process.exit(0);
		    }
		}
	}
	if(workers==0) workers=1;
	if(queue==""){
		console.log("ERROR: Invalid Parameter -- below is the use case");
	 	console.log("node-worker start/stop QUEUE=queue1 WORKERS=2 DB_CONFIG=config_name");
	 	console.log("DB_CONFIG is optional");
	}else{
		var ENVIRONMENT=process.env.NODE_ENV;	
		if(ENVIRONMENT=="" || ENVIRONMENT==undefined) ENVIRONMENT="development";
			
		if(action=="start"){
			var db_config=undefined;
				
			if(db_config_option!=''){
				var Config = require('config-js');
				if(!Config){
					Config = require('config-js').Config;
				}
				GLOBAL.CONFIG=new Config('./config/'+ENVIRONMENT+'.js');
				db_config=CONFIG.get(db_config_option);
			}
			var node_worker=new NodeWorker(db_config);
			node_worker.startWorkers(queue,workers,JOB_TIMEOUT);
			
			if(!fs.existsSync(PID_PATH)){
				fs.mkdirSync(PID_PATH);
			}
			fs.writeFileSync(PID_PATH+"/node-simple-queue-"+ENVIRONMENT.replace(/\//g,"-")+"-"+queue+".pid",process.pid);

			process.on('SIGINT',on_exit);
			process.on('SIGTERM',on_exit);
			// process.on('exit',on_exit);
		}else if(action=="stop"){
			var exec=require('child_process').exec;
			var pid=fs.readFileSync(PID_PATH+"/node-simple-queue-"+ENVIRONMENT.replace(/\//g,"-")+"-"+queue+".pid");
			if(pid!="")
				exec("kill "+pid,function(err,result){
					fs.writeFileSync(PID_PATH+"/node-simple-queue-"+ENVIRONMENT.replace(/\//g,"-")+"-"+queue+".pid","");
					process.exit(0);
				});
		}else{
			console.log("ERROR: Invalid Parameter -- below is the use case");
		 	console.log("node-worker start/stop QUEUE=queue1 WORKERS=2 DB_CONFIG=config_name");
		 	console.log("DB_CONFIG is optional");		
		}
	}
}else{
	console.log("ERROR: Invalid Parameter -- below is the use case");
 	console.log("node-worker start/stop QUEUE=queue1 WORKERS=2 DB_CONFIG=config_name");
 	console.log("DB_CONFIG is optional");
}
function on_exit(){
	for(var child in GLOBAL.workers){
		GLOBAL.workers[child].send('terminate');
	}
	process.exit(0);
}